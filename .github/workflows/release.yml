# This workflow builds a .deb package and a .msi installer when a version is pushed.

name: release

on:
  push:
    tags: 
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  getversion:
    runs-on: ubuntu-latest
    outputs: 
      version: ${{steps.version.outputs.non-prefixed}}
    steps:
      - name: Get version from tag name
        id: version
        uses: LykkeBusiness/get-semver-from-tag-action@v1.0.2
        with:
          tag: ${{ github.ref }}

  build-deb:
    runs-on: ubuntu-latest
    needs: getversion
    env:
      PKGROOT: ${{ github.workspace }}/tmp/debpkg
    outputs: 
      file_name: ${{ steps.package.outputs.file_name }}
    steps:
      # Check out the repository into $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      # Create the package contents directory structure
      - name: Assemble package contents
        id: assemble
        run: |
          echo Release dir: $PKGROOT/opt
          mkdir -p $PKGROOT/DEBIAN
          mkdir -p $PKGROOT/opt/quartersbrief
          cp -r $GITHUB_WORKSPACE/src $PKGROOT/opt/quartersbrief
          cp -r $GITHUB_WORKSPACE/res $PKGROOT/opt/quartersbrief
          cp -r $GITHUB_WORKSPACE/scripts $PKGROOT/opt/quartersbrief
          cp $GITHUB_WORKSPACE/package.json $PKGROOT/opt/quartersbrief
          cp $GITHUB_WORKSPACE/README.md $PKGROOT/opt/quartersbrief

      # Create .deb control scripts
      - name: Create maintainer scripts
        run: |
          # preinst
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/preinst $PKGROOT/DEBIAN/ && chmod +x $PKGROOT/DEBIAN/preinst
          # postinst
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/postinst $PKGROOT/DEBIAN/ && chmod +x $PKGROOT/DEBIAN/postinst
          # prerm
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/prerm $PKGROOT/DEBIAN/ && chmod +x $PKGROOT/DEBIAN/prerm
 
      - name: Build .deb package
        uses: jiro4989/build-deb-action@v2
        id: package
        with:
          package: quartersbrief
          package_root: ${{ env.PKGROOT }}
          version: ${{ needs.getversion.outputs.version }}
          maintainer: 'BadIdeaException'
          arch: 'amd64'
          depends: 'nodejs (>= 17.0.0), wine, wine32, python3'

      - uses: actions/upload-artifact@v3
        with: 
          name: deb
          path: ${{ steps.package.outputs.file_name }}
          retention-days: 1

  build-exe:
    needs: getversion
    runs-on: windows-latest
    outputs: 
      file_name: ${{ steps.package.outputs.file_name }}
    steps:
      # Check out the repository into $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      - name: Assemble package contents
        run: |
          mkdir ${{ github.workspace }}\tmp\installer\app
          xcopy /s /e ${{ github.workspace }}\src ${{ github.workspace }}\tmp\installer\app\src\
          xcopy /s /e ${{ github.workspace }}\res ${{ github.workspace }}\tmp\installer\app\res\
          xcopy /s /e ${{ github.workspace }}\scripts ${{ github.workspace }}\tmp\installer\app\scripts\
          xcopy ${{ github.workspace }}\package.json ${{ github.workspace }}\tmp\installer\app\
          xcopy ${{ github.workspace }}\README.md ${{ github.workspace }}\tmp\installer\app\
          xcopy ${{ github.workspace }}\.github\workflows\res\windows\install.nsi ${{ github.workspace }}\tmp\installer\

      # Download NodeJS and Python 3 installers to bundle with the install
      - name: Download NodeJS and Python 3
        run: |
          mkdir ${{ github.workspace }}\tmp\installer\redist
          Invoke-WebRequest "https://nodejs.org/dist/v17.8.0/node-v17.8.0-x64.msi" -OutFile "${{ github.workspace }}\tmp\installer\redist\nodejs.msi"
          Invoke-WebRequest "https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe" -OutFile "${{ github.workspace }}\tmp\installer\redist\python3.exe"
      
      - name: Build Setup.exe
        id: package
        run: |
          makensis -DVERSION="${{ needs.getversion.outputs.version }}" ${{ github.workspace }}\tmp\installer\install.nsi
          echo "::set-output name=file_name::Setup Quartersbrief v${{ needs.getversion.outputs.version }}.exe"

      - uses: actions/upload-artifact@v3
        with:
          name: exe
          path: ${{ github.workspace }}\tmp\installer\${{ steps.package.outputs.file_name }}

  build-msi:
    needs: getversion
    runs-on: windows-latest
    env:
      workdir: ${{ github.workspace }}\tmp
      releasedir: ${{ github.workspace }}\tmp\installer\app
    outputs: 
      file_name: ${{ steps.package.outputs.file_name }}
    steps:
      # Check out the repository into $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      # Windows Installer can't handle version tags with suffixed pre-release identifiers.
      # So instead, we need to construct a version number that will encode all the relevant
      # information into its last digit.
      # The actual version numbers are always in a format a.b.c or a.b.c-d.e, where
      # - a,b,c are numbers
      # - d is one of "alpha", "beta", "rc"
      # - e is a number
      # We will turn this into a.b.x, where x is formed as follows:
      # - x is 1500 * c
      # - if d and e are set, add e to x
      # - id d is
      #     "alpha", add to x 0
      #     "beta", add to x 500
      #     "rc", add to x 1000
      #     not set, add to x 1100
      # (The last bit ensures that release versions are always considered higher than prerelease ones.)
      # As a corollary, there can be 500 alpha and beta prereleases each, and 100 release candidates.
      - name: Set version for Windows Installer
        id: msi-version
        shell: pwsh
        run: |
          $Version = "${{ needs.getversion.outputs.version }}"
          if ($Version -match "(\d+)\.(\d+)\.(\d+)(?:-(\w+)\.(\d+))?") {
            $Major = $Matches[1]
            $Minor = $Matches[2]
            $Patch = $Matches[3]
            $PrereleaseIdentifier = $Matches[4]
            $PrereleaseNumber = $Matches[5] 
            $Range = switch ($PrereleaseIdentifier) {
              "alpha" { 0 }
              "beta" { 500 }
              "rc" { 1000 }
              default { 1100 }
            }
            $Composite = 1500 * $Patch + $Range + $PrereleaseNumber
            echo "$Major.$Minor.$Composite"
          } else {
            echo "$Version is not a valid version string"
            exit(1) 
          }

      # Assemble the files to be put into the installer in $PKGROOT/opt
      - name: Assemble package contents
        run: |
          mkdir ${{ env.workdir }}
          mkdir ${{ env.releasedir }}
          xcopy /s /e ${{ github.workspace }}\src ${{ env.releasedir }}\src\
          xcopy /s /e ${{ github.workspace }}\res ${{ env.releasedir }}\res\
          xcopy /s /e ${{ github.workspace }}\scripts ${{ env.releasedir }}\scripts\
          xcopy ${{ github.workspace }}\package.json ${{ env.releasedir }}\
          xcopy ${{ github.workspace }}\README.md ${{ env.releasedir }}\
          xcopy ${{ github.workspace }}\.github\workflows\res\windows\LICENSE.rtf ${{ env.workdir }}

      # Harvest the release dir, creating QuartersbriefFiles.wxs that includes all files to install
      - name: Harvest package contents
        id: heat
        run: |
          ${{ env.wix }}\heat.exe \
            dir \
            "${{ env.releasedir }}" \
            -ag \
            -cg QuartersbriefFiles \
            -var var.SourceDir \
            -dr INSTALLDIR \
            -srd \
            -out "${{ env.workdir }}\QuartersbriefFiles.wxs"
          
      # Compile all .wxs files to .wixobj files
      - name: Compile *.wxs to *.wixobj
        id: candle
        run: |
          ${{ env.wix }}\candle.exe \
            -out "${{ env.workdir }}" \
            -v \
            -ext WixUtilExtension \
            -arch x64 \
            -dSourceDir="${{ env.releasedir }}" \
            -dVersion=${{ steps.msi-version.outputs.msi-version }} \
            -dFullVersion=${{ needs.getversion.outputs.version }} \
            "${{ github.workspace }}\.github\workflows\res\windows\*.wxs" "${{ env.workdir }}\QuartersbriefFiles.wxs"

      # Link all .wixobj files. This will create quartersbrief.msi
      - name: Link *.wixobj to quartersbrief.msi
        id: light
        run: |
          ${{ env.wix }}\light.exe \
            -ext WixUIExtension \
            -ext WixUtilExtension \
            -dWixUILicenseRtf="${{ github.workspace }}\.github\workflows\res\windows\LICENSE.rtf" \
            -b "${{ github.workspace }}\.github\workflows\res\windows" \
            -loc "${{ github.workspace }}\.github\workflows\res\windows\quartersbrief.wxl" \
            -cultures:en-US \
            ${{ env.workdir }}\*.wixobj \
            -out ${{ env.workdir }}\Quartersbrief_${{ needs.getversion.outputs.version }}.msi 
          echo "::set-output name=file_name::Quartersbrief_v${{ needs.getversion.outputs.version }}.msi"

      # Upload the .msi file
      - uses: actions/upload-artifact@v3
        with:
          name: msi
          path: ${{ env.workdir }}\${{ steps.package.outputs.file_name }}

  release:  
    runs-on: ubuntu-latest
    needs: [build-deb, build-exe, build-msi]
    steps:
      - uses: actions/download-artifact@v3

      - uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            deb/${{ needs.build-deb.outputs.file_name }}
            exe/${{ needs.build-exe.outputs.file_name }}
            msi/${{ needs.build-msi.outputs.file_name }}